# RUN: %checkLexer


# Literals

var a = 1
# CHECK: IDENTIFIER(var)
# CHECK: IDENTIFIER(a)
# CHECK: ASSIGN
# CHECK: INT_LITERAL(1)

var b = 1.2
# CHECK: FLOAT_LITERAL(1.2)


# Operators

var c = 22 + 2
# CHECK: INT_LITERAL(22)
# CHECK: ADD
# CHECK: INT_LITERAL(2)

var d = 33 - 3
# CHECK: INT_LITERAL(33)
# CHECK: SUB
# CHECK: INT_LITERAL(3)

var e = 44 / 4
# CHECK: INT_LITERAL(44)
# CHECK: DIV
# CHECK: INT_LITERAL(4)

var f = 55 * 5
# CHECK: INT_LITERAL(55)
# CHECK: MULT
# CHECK: INT_LITERAL(5)

var g = 55 ^ 5
# CHECK: INT_LITERAL(55)
# CHECK: POW
# CHECK: INT_LITERAL(5)


# Parenthesises

var h = (23)
# CHECK: L_PAREN
# CHECK: INT_LITERAL(23)
# CHECK: R_PAREN


# Range

var k = {62,78}
# CHECK: L_BRACE
# CHECK: INT_LITERAL(62)
# CHECK: COMMA
# CHECK: INT_LITERAL(78)
# CHECK: R_BRACE


# Map

var l = map({1, 3}, l1 -> l1 * 2)
# CHECK: IDENTIFIER(map)
# CHECK: L_PAREN
# CHECK: L_BRACE
# CHECK: INT_LITERAL(1)
# CHECK: COMMA
# CHECK: INT_LITERAL(3)
# CHECK: R_BRACE
# CHECK: COMMA
# CHECK: IDENTIFIER(l1)
# CHECK: ARROW
# CHECK: IDENTIFIER(l1)
# CHECK: MULT
# CHECK: 2
# CHECK: R_PAREN


# Reduce
var m = reduce({1, 3}, 0, m1 m2 -> m1 + m2)
# CHECK: IDENTIFIER(reduce)
# CHECK: L_PAREN
# CHECK: L_BRACE
# CHECK: INT_LITERAL(1)
# CHECK: COMMA
# CHECK: INT_LITERAL(3)
# CHECK: R_BRACE
# CHECK: COMMA
# CHECK: INT_LITERAL(0)
# CHECK: IDENTIFIER(m1)
# CHECK: IDENTIFIER(m2)
# CHECK: ARROW
# CHECK: IDENTIFIER(m1)
# CHECK: ADD
# CHECK: IDENTIFIER(m2)
# CHECK: R_PAREN